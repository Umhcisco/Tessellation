int size(cell,*VM,top){
 int i, s = 0;
 for (i = 0; i < top; i++)
  while (VM[cell][i] != NULL)
   s++;
 return s;
}
void move(m,cell,*VM,top,user_id){
 int i;
 for (i = 0; i < top; i++)
  if (VM[m][i] == user_id)
   VM[m][i] == NULL;
 for (i = 0; i < top; i++)
  if (VM[cell][i] == NULL)
   VM[cell][i] = user_id;
 return;
}
Algorithm2(u,m,f,*VM,top,user_id){
 int v = m, hops = 3, i = 0, j = 0;
 int pos[3] = {0, -1, +1};
 int offset[3][6] = {
  {-f, -2*f+1, -f+1, f, 2*f-1, f-1},
  {-2*f, -4*f+2, -2*f+2, 2*f, 4*f-2, 2*f-2},
  {-1, -3*f+1, -3*f+2, +1, 3*f-1, 3*f-2}
 };
    // int offset[0]=[-3,-5,-2,+3,+5,+2];   //if f=3
    // int offset[1]=[-6,-10,-4,+6,+10,+4]; //if f=3
    // int offset[2]=[-1,-8,-7,+1,+8,+7];   //if f=3 
 if (u == m) {hops = 0;}        //just moved onto VM
 else{
  for (i = 0; i < 6; i++) {        //check offset[0]
   if (u == m + offset[0][i]) {
    for (j = 0; j < 3; j++) {      
     if (size(m+offset[0][(i+pos[j])%6],*VM,top) < top) {
      move(m,m+offset[0][(i+pos[j])%6],*VM,top,user_id);
      v = m + offset[0][(i+pos[j])%6];  
      hops = |pos[j]|; }
    }else {hops = |pos|;}       //VM does not move      
   }if (u == m + offset[1][i]) {   //check offset[1]
     if (size(m+offset[0][i],*VM,top) < top) { 
      move(m,m+offset[0][i],*VM,top,user_id);
      v = m + offset[0][i];  
      hops = 1; 
      }else {hops = 2;}          //VM does not move
   }if (u == m + offset[2][i]) {   //check offset[2]
     for (j = 0; j < 2; j++) {      
      if (size(m+offset[0][(i+pos[j])%6],*VM,top) < top) { 
       move(m,m+offset[0][(i+pos[j])%6],*VM,top,user_id);
       v = m + offset[0][(i+pos[j])%6];  
       hops = 1; }
      }else {hops = 2;}         //VM does not move     
}}}} 
